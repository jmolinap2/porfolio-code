---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Stack",
    label: "stack",
    url: "/#stack",
  },
  {
    title: "Sobre mí",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "mailto:miduga@gmail.com",
  },
]
---

<!-- Área de activación -->
<div id="menu-trigger-zone" class="fixed top-0 left-0 w-full h-[33vh] z-40"></div>

<!-- Header oculto por defecto -->
<header
  id="main-menu"
  class="fixed top-0 z-50 w-full flex justify-center opacity-0 pointer-events-none transition-opacity duration-300"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center backdrop-blur bg-black/20 dark:bg-white/5 shadow-md"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")
    const triggerZone = document.getElementById("menu-trigger-zone")
    const menu = document.getElementById("main-menu")
    let color = "text-blue-500"

    let hideTimeout = null

    // Intersection
    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") === entry.target.id) {
              item.classList.add(color)
            } else {
              item.classList.remove(color)
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Mostrar inmediatamente al entrar
    triggerZone.addEventListener("mouseenter", () => {
      clearTimeout(hideTimeout)
      menu.classList.remove("opacity-0", "pointer-events-none")
      menu.classList.add("opacity-100", "pointer-events-auto")
    })

    // Ocultar con retardo al salir
    triggerZone.addEventListener("mouseleave", () => {
  hideTimeout = setTimeout(() => {
    const hoveringTheme = document.querySelector("#theme-toggle")?.matches(":hover")
    if (!hoveringTheme) {
      menu.classList.remove("opacity-100", "pointer-events-auto")
      menu.classList.add("opacity-0", "pointer-events-none")
    }
  }, 800)
})// ⏱ retardo en milisegundos (0.8s)


    // Cleanup observer
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>


<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-blue-600/100 bg-blue-200/10 ring-white/10;
    }
  }
</style>
